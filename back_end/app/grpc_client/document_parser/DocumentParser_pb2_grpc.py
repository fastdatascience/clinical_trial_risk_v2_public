# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.grpc_client.document_parser as DocumentParser__pb2


class DocumentParserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.processDocument = channel.unary_unary(
            "/DocumentParserService/processDocument",
            request_serializer=DocumentParser__pb2.DocumentParserRequest.SerializeToString,
            response_deserializer=DocumentParser__pb2.DocumentParserResponse.FromString,
        )


class DocumentParserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def processDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DocumentParserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "processDocument": grpc.unary_unary_rpc_method_handler(
            servicer.processDocument,
            request_deserializer=DocumentParser__pb2.DocumentParserRequest.FromString,
            response_serializer=DocumentParser__pb2.DocumentParserResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("DocumentParserService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DocumentParserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def processDocument(
        request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/DocumentParserService/processDocument",
            DocumentParser__pb2.DocumentParserRequest.SerializeToString,
            DocumentParser__pb2.DocumentParserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
